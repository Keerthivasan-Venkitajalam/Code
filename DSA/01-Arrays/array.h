/*
 **************************** DO NOT EDIT THIS FILE ****************************
 ************ ANY CHANGES MADE WILL BE DISCARDED BEFORE EVALUATION *************
*/

/** 
	A function to allocate memory for n integers dynamically,
		set all the entries to -1,
		and return the starting address of the allocated memory.
	@param n number of elements in the array
	@return starting address of the allocated memory
*/
extern int* initArray(int n);

/** 
	A function to read n integers from the user,
		and store them in an array A.
	@param A starting address of the array
	@param n number of elements in the array
*/
extern void readArray(int* A, int n);

/** 
	A function to print the elements in an integer array.
	The elements should be printed with a single space character 
		separating each element.
	After printing all the elements, add a newline.
	@param A starting address of the array
	@param n number of elements in the array
	@example if the array is [12, 3, 4],
		then the following output should be printed (without quotes) 
		with a newline at the end:
		"12 3 4 "

*/
extern void printArray(int* A, int n);

/** 
	A function to swap the first element with the
		smallest element in an integer array.
	@param A starting address of the array
	@param n number of elements in the array
*/
extern void modifyArray(int* A, int n);

/** 
	A function that repeatedly reads a positive integer p
		and updates an array as specified in file 3.c of Assignment 1.
	@param A starting address of the array
	@param n number of elements in the array
*/ 
extern void setArray(int* A, int n);

/** 
	A function to find the largest index i in an integer array such that 
		the sub-array from index 0 to i is in ascending order.
	@param A starting address of the array
	@param n number of elements in the array
	@return the largest index in A such that the sub-array A[0..i] is in ascending order
*/ 
extern int findIndex(int* A, int n);

/** 
	A function to repeatedly swap an element m = A[i+1] with the element to its left,
		until the sub-array from index 0 to i+1 is sorted in ascending order
	@param A starting address of an integer array, in which
		the sub-array from index 0 to i is sorted in ascending order
	@param n number of elements in the array
	@param i an integer whose value is less than n,
		such that the sub-array A[0..i] is sorted in ascending order
*/ 
extern void swapArray(int* A, int n, int i);

/** 
	A function to perform the operation specified in file 5.c of Assignment 1
		on an integer array.
	@param A starting address of the array
	@param n number of elements in the array
*/ 
extern void shrinkArray(int* A, int n);

/** 
	A function to arrange the elements in an integer array 
		to meet the requirements specified in file 6.c of Assignment 1.
	@param A starting address of the array
	@param n number of elements in the array
	@param p the element around which the array is to be rearranged
*/ 
extern int arrangeArray(int* A, int n, int p);

/** 
	A function to combine the elements in two sorted integer arrays
		into a new array, sorted in descending order,
		by following the strategy specified in file 7.c of Assignment 1.
	@param A starting address of the first array
	@param n number of elements in the first array 
	@param B starting address of the second array
	@param m number of elements in the second array
	@return starting address of the combined array
*/ 
extern int* combineArray(int* A, int n, int* B, int m);

/** 
    A function to read the roll numbers of 
    	students and store them in an array.
    @param A starting address of the array
    @param n number of students 
*/ 
extern void readStudents(int* A, int n);


/** 
    A function to print the roll numbers of 
		students stored in an array.
	If the number of students in the array is zero, 
		print -1.
    @param A starting address of the array
    @param n number of students 
*/ 
extern void printStudents(int* A, int n);


/** 
    A function to find the roll number of students 
    	registered for either of the speech events.
	Store the roll number of students registered for either of
		the speech events, in the order given below.  
		^ The students registered for English speech is stored first, 
			followed by those registered for Hindi speech, 
			in the order they were given in the input.
	Note that a student should be listed only once,
		if they are registered for both English and Hindi speech.
    @param A starting address of the array with roll number of
            students registered for English speech
    @param n number of students registered for English speech 
    @param B starting address of the array with roll number of
            students registered for Hindi speech
    @param m number of students registered for Hindi speech
    @param C starting address of the array with roll number of
            students registered for either of the speech events
    @return number of students registered for either of the speech events
*/ 
extern int speechStudents(int* A, int n, int* B, int m, int* C);


/** 
    A function to find the roll number of students 
    	registered only for debate, 
		in the order they were given in the input.
    @param A starting address of the array with roll number of
            students registered for either of the speech events
    @param n number of students registered for for either of the speech events
    @param B starting address of the array with roll number of
            students registered for debate
    @param m number of students registered for debate
    @param C starting address of the array with roll number of
            students registered only for debate
    @return number of students registered only for debate
*/ 
extern int debateStudents(int* A, int n, int* B, int m, int* C);


/** 
	A function to dynamically allocate memory 
		for a string of maximum length n,
		read and store the string, 
		and return the starting address of the allocated memory.
	@param n maximum length of the string
	@return starting address of the allocated memory
*/
extern char* readString(int n);

/** 
	A function to find the number of occurances 
		of a character ch in a string.
	@param str starting address of the string
	@param ch the character whose occurrences are to be counted
	@return number of occurrences of the character ch in the string
*/
extern int countChar(char* str, char ch);

/** 
	A function to find the number of occurrences 
		of a word w in a string.
	@param str starting address of the string
	@param w the word whose occurrences are to be counted
	@return number of occurrences of the word w in the string
*/
extern int countWord(char* str, char* w);